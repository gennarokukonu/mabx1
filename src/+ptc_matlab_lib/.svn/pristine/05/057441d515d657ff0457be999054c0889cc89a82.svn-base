function varargout = uiplot_HistogramAndCumulativeTimeShare(varargin)

import('ptc_matlab_lib.*');

if length(varargin) >= 2 && isscalar(varargin{1}) && ishghandle(varargin{1})
    %This is a GUI Callback
    SRC_HANDLE = varargin{1}; %#ok<NASGU>
    EVENT_DATA = varargin{2}; %#ok<NASGU>
    assert(length(varargin) >= 2);
    varargin = varargin(3:end);
else
    SRC_HANDLE = []; %#ok<NASGU>
    EVENT_DATA = struct([]); %#ok<NASGU>
end

pairs = {'action', 'init'};
ARGS = parseargs(varargin, pairs);

switch ARGS.action
    case 'init'
        pairs = {'Data', [], ...
            'DataItemNames', {}, ...
            'DefaultNumberOfBins', 10, ...
            'DefaultLowerXLimit', -Inf, ...
            'DefaultUpperXLimit', Inf, ...
            'XSampleIntervalRelative', 0.01, ...
            'XLabel', '', ...
            'XUnit', '', ...
            'Maximized', false, ...
            'CumulativeTimeShareComparisonOperator', @le, ...
            'FigureParams', {}};
        ARGS = parseargs(varargin, pairs);
        
        if ischar(ARGS.DataItemNames)
            ARGS.DataItemNames = cellstr(ARGS.DataItemNames);
        end
        
        pairs = {['fig_' mfilename],      [0.30893    0.094286      0.6256     0.66762], ...
            'axesHistogramAndCumulativeTimeShare',     [0.094196      0.1398     0.57184     0.71469], ...
            'textHistogramAndCumulativeTimeShare',     [0.094196     0.92582     0.85728    0.034237], ...
            'editNumberOfBins',      [0.85538     0.82168    0.095147    0.034237], ...
            'textNumberOfBins',      [0.71265     0.82168     0.14367     0.03281], ...
            'tableTimeShare',       [0.7117     0.14265     0.23882     0.57204], ...
            'editUpperXLimit',      [0.85538     0.71327    0.095147    0.034237], ...
            'editLowerXLimit',      [0.85538     0.75036    0.095147    0.034237], ...
            'textUpperXLimit',      [0.71265     0.71327     0.14367     0.03281], ...
            'textLowerXLimit',      [0.71265     0.75036     0.14367     0.03281]};
        posvars = parseargs(pairs);
        
        pairs = {'FIGURE_HANDLE', figure('MenuBar', 'figure', ...
                                         'ToolBar', 'figure', ...
                                         'Name', mfilename, ...
                                         'Resize', 'on', ...
                                         'Units', 'normalized', ...
                                         'CreateFcn', {@movegui, 'center'}, ...
                                         'WindowStyle', 'normal', ...
                                         'Position', eval(['posvars.fig_' mfilename]))};
        ARGS = copyfields(parseargs(varargin, pairs), ARGS);
        
        if ~isempty(ARGS.FigureParams)
            set(ARGS.FIGURE_HANDLE, ARGS.FigureParams{:});
        end
        if ARGS.Maximized
            maximize_figure(ARGS.FIGURE_HANDLE);
        end
        
        %textHistogramAndCumulativeTimeShare
        uicontrol('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'textHistogramAndCumulativeTimeShare', ...
            'Position', posvars.textHistogramAndCumulativeTimeShare, ...
            'Style', 'text', ...
            'String', 'Histogram And Cumulative Time Share', ...
            'TooltipString', 'Histogram And Cumulative Time Share', ...
            'FontWeight', 'bold', ...
            'FontSize', 12, ...
            'BackgroundColor', 'yellow');
        
        %axesHistogramAndCumulativeTimeShare
        axesHistogramAndCumulativeTimeShare = axes('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'axesHistogramAndCumulativeTimeShare', ...
            'Position', posvars.axesHistogramAndCumulativeTimeShare);
        
        %textNumberOfBins
        uicontrol('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'textNumberOfBins', ...
            'Position', posvars.textNumberOfBins, ...
            'Style', 'text', ...
            'String', 'Number Of Bins', ...
            'TooltipString', 'Number Of Bins', ...
            'FontWeight', 'normal', ...
            'FontSize', 10, ...
            'BackgroundColor', 'yellow');
        
        %editNumberOfBins
        uicontrol('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'editNumberOfBins', ...
            'Position', posvars.editNumberOfBins, ...
            'Style', 'edit', ...
            'String', num2str(ARGS.DefaultNumberOfBins), ...
            'Callback', {str2func(thisfuncname), 'action', 'editNumberOfBinsCallback', ...
            'Data', ARGS.Data, ...
            'AxesHandle', axesHistogramAndCumulativeTimeShare, ...
            'XLabel', ARGS.XLabel, ...
            'XUnit', ARGS.XUnit, ...
            'DataItemNames', ARGS.DataItemNames, ...
            'XSampleIntervalRelative', ARGS.XSampleIntervalRelative, ...
            'CumulativeTimeShareComparisonOperator', ARGS.CumulativeTimeShareComparisonOperator, ...
            'FIGURE_HANDLE', ARGS.FIGURE_HANDLE}, ...
            'TooltipString', 'Number Of Bins', ...
            'BackgroundColor', 'white');
        
        %textLowerXLimit
        uicontrol('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'textLowerXLimit', ...
            'Position', posvars.textLowerXLimit, ...
            'Style', 'text', ...
            'String', ['Lower X Limit (' ARGS.XUnit ')'], ...
            'TooltipString', ['Lower X Limit (' ARGS.XUnit ')'], ...
            'FontWeight', 'normal', ...
            'FontSize', 10, ...
            'BackgroundColor', 'yellow');
        
        %textUpperXLimit
        uicontrol('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'textUpperXLimit', ...
            'Position', posvars.textUpperXLimit, ...
            'Style', 'text', ...
            'String', ['Upper X Limit (' ARGS.XUnit ')'], ...
            'TooltipString', ['Upper X Limit (' ARGS.XUnit ')'], ...
            'FontWeight', 'normal', ...
            'FontSize', 10, ...
            'BackgroundColor', 'yellow');
        
        %Plotting histogram
        [Xvec, Yvec] = feval(thisfuncname, 'action', 'refreshAxes', ...
            'Data', ARGS.Data, ...
            'AxesHandle', axesHistogramAndCumulativeTimeShare, ...
            'NumberOfBins', ARGS.DefaultNumberOfBins, ...
            'XLabel', ARGS.XLabel, ...
            'XUnit', ARGS.XUnit, ...
            'DataItemNames', ARGS.DataItemNames, ...
            'XSampleIntervalRelative', ARGS.XSampleIntervalRelative, ...
            'CumulativeTimeShareComparisonOperator', ARGS.CumulativeTimeShareComparisonOperator);
        
        %editLowerXLimit
        uicontrol('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'editLowerXLimit', ...
            'Position', posvars.editLowerXLimit, ...
            'Style', 'edit', ...
            'String', num2str(ARGS.DefaultLowerXLimit), ...
            'TooltipString', ['Lower X Limit (' ARGS.XUnit ')'], ...
            'BackgroundColor', 'white', ...
            'Callback', {str2func(thisfuncname), 'action', 'editLowerXLimitCallback', ...
            'DataItemNames', ARGS.DataItemNames(:), ...
            'Xvec', Xvec, ...
            'Yvec', Yvec, ...
            'FIGURE_HANDLE', ARGS.FIGURE_HANDLE});
        
        %editUpperXLimit
        uicontrol('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'editUpperXLimit', ...
            'Position', posvars.editUpperXLimit, ...
            'Style', 'edit', ...
            'String', num2str(ARGS.DefaultUpperXLimit), ...
            'TooltipString', ['Upper X Limit (' ARGS.XUnit ')'], ...
            'BackgroundColor', 'white', ...
            'Callback', {str2func(thisfuncname), 'action', 'editUpperXLimitCallback', ...
            'DataItemNames', ARGS.DataItemNames(:), ...
            'Xvec', Xvec, ...
            'Yvec', Yvec, ...
            'FIGURE_HANDLE', ARGS.FIGURE_HANDLE});
        
        %tableTimeShare
        uitable('Parent', ARGS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'tableTimeShare', ...
            'FontName', editfont, ...
            'Position', posvars.tableTimeShare, ...
            'ColumnName', {'Data Item Name', 'Time Share (%)'}, ...
            'ColumnEditable', [false, false], ...
            'ColumnWidth', {'auto', 'auto'}, ...
            'ColumnFormat', {'char', 'numeric'});
        
        feval(thisfuncname, 'action', 'refreshTable', ...
            'DataItemNames', ARGS.DataItemNames(:), ...
            'Xvec', Xvec, ...
            'Yvec', Yvec, ...
            'FIGURE_HANDLE', ARGS.FIGURE_HANDLE);
        
        %Return figure handle as output
        varargout{1} = ARGS.FIGURE_HANDLE;
        
        %% CASE editLowerXLimitCallback
    case 'editLowerXLimitCallback'
        pairs = {'DataItemNames', {}, ...
            'Xvec', [], ...
            'Yvec', [], ...
            'FIGURE_HANDLE', []};
        ARGS = parseargs(varargin, pairs);
        
        feval(thisfuncname, 'action', 'refreshTable', ...
            'DataItemNames', ARGS.DataItemNames(:), ...
            'Xvec', ARGS.Xvec, ...
            'Yvec', ARGS.Yvec, ...
            'FIGURE_HANDLE', ARGS.FIGURE_HANDLE);
        
        %% CASE editUpperXLimitCallback
    case 'editUpperXLimitCallback'
        pairs = {'DataItemNames', {}, ...
            'Xvec', [], ...
            'Yvec', [], ...
            'FIGURE_HANDLE', []};
        ARGS = parseargs(varargin, pairs);
        
        feval(thisfuncname, 'action', 'refreshTable', ...
            'DataItemNames', ARGS.DataItemNames(:), ...
            'Xvec', ARGS.Xvec, ...
            'Yvec', ARGS.Yvec, ...
            'FIGURE_HANDLE', ARGS.FIGURE_HANDLE);
        
        %% CASE refreshTable
    case 'refreshTable'
        pairs = {'DataItemNames', {}, ...
            'Xvec', [], ...
            'Yvec', [], ...
            'FIGURE_HANDLE', []};
        ARGS = parseargs(varargin, pairs);
        handles = guihandles(ARGS.FIGURE_HANDLE);
        
        LowerXLimit = str2double(char(strtrim(get(handles.editLowerXLimit, 'String'))));
        if isnan(LowerXLimit)
            set(handles.editLowerXLimit, 'String', '-Inf');
            LowerXLimit = -Inf;
        end
        UpperXLimit = str2double(char(strtrim(get(handles.editUpperXLimit, 'String'))));
        if isnan(UpperXLimit)
            set(handles.editUpperXLimit, 'String', 'Inf');
            UpperXLimit = Inf;
        end
        if LowerXLimit > UpperXLimit
            waitfor(errordlg('ERROR: Lower X limit is greater than upper X limit.', 'ERROR', 'modal'));
            return;
        end
        LowerXLimit = limit('InMatrix', LowerXLimit, 'LowerLimit', min(ARGS.Xvec), 'UpperLimit', max(ARGS.Xvec));
        UpperXLimit = limit('InMatrix', UpperXLimit, 'LowerLimit', min(ARGS.Xvec), 'UpperLimit', max(ARGS.Xvec));
        LowerYval = interp1(ARGS.Xvec, ARGS.Yvec, LowerXLimit, 'linear');
        LowerYval = limit('InMatrix', LowerYval(:), 'LowerLimit', 0, 'UpperLimit', 100);
        UpperYval = interp1(ARGS.Xvec, ARGS.Yvec, UpperXLimit, 'linear');
        UpperYval = limit('InMatrix', UpperYval(:), 'LowerLimit', 0, 'UpperLimit', 100);
        
        TimeSharePercent = abs(UpperYval - LowerYval);
        
        set(handles.tableTimeShare, 'Data', [ARGS.DataItemNames(:) num2cell(TimeSharePercent(:))]);
        
        %% CASE editNumberOfBinsCallback
    case 'editNumberOfBinsCallback'
        pairs = {'Data', [], ...
            'AxesHandle', [], ...
            'XLabel', '', ...
            'XUnit', '', ...
            'DataItemNames', {}, ...
            'XSampleIntervalRelative', 0.05, ...
            'CumulativeTimeShareComparisonOperator', @le, ...
            'FIGURE_HANDLE', []};
        ARGS = parseargs(varargin, pairs);
        handles = guihandles(ARGS.FIGURE_HANDLE);
        
        NumberOfBins = str2double(strtrim(char(get(handles.editNumberOfBins, 'String'))));
        if isnan(NumberOfBins) || NumberOfBins <= 1
            return;
        end
        
        feval(thisfuncname, 'action', 'refreshAxes', ...
            'Data', ARGS.Data, ...
            'AxesHandle', ARGS.AxesHandle, ...
            'NumberOfBins', NumberOfBins, ...
            'XLabel', ARGS.XLabel, ...
            'XUnit', ARGS.XUnit, ...
            'DataItemNames', ARGS.DataItemNames, ...
            'XSampleIntervalRelative', ARGS.XSampleIntervalRelative, ...
            'CumulativeTimeShareComparisonOperator', ARGS.CumulativeTimeShareComparisonOperator);        
        
        %% CASE refreshAxes
    case 'refreshAxes'
        pairs = {'Data', [], ...
            'AxesHandle', [], ...
            'NumberOfBins', 10, ...
            'XLabel', '', ...
            'XUnit', '', ...
            'DataItemNames', {}, ...
            'CumulativeTimeShareComparisonOperator', @le, ...
            'XSampleIntervalRelative', 0.05};
        ARGS = parseargs(varargin, pairs);
        
        cla(ARGS.AxesHandle);
        
        [Ncount, Xvals] = hist(ARGS.Data, ARGS.NumberOfBins);
        
        %Sundeep Tuteja, 2013-04-26: The following code is necessary
        %because of an inconsistency in the way hist works. For vector
        %data, Ncount is a row vector. One would assume that multiple
        %datasets would create a new row for Ncount for each dataset, but
        %Ncount gets transposed.
        if isvector(Ncount)
            Ncount = Ncount(:);
        end
        
        bar_handles = bar(ARGS.AxesHandle, Xvals, 100*Ncount./repmat(sum(Ncount), length(Xvals), 1), 'hist');
        grid(ARGS.AxesHandle, 'on');
        xlabel(ARGS.AxesHandle, [ARGS.XLabel ' (' ARGS.XUnit ')'], 'Interpreter', 'none');
        ylabel(ARGS.AxesHandle, 'Normalized Count (%)');
        title(ARGS.AxesHandle, strimplode(ARGS.DataItemNames, '/'));
        currentNextPlot = get(ARGS.AxesHandle, 'NextPlot');
        set(ARGS.AxesHandle, 'NextPlot', 'add');
        
        %Plotting cumulative time share
        ActualInterval = (max(Xvals) - min(Xvals))*ARGS.XSampleIntervalRelative;
        XvalsInterval = Xvals(2) - Xvals(1);
        Xvec = Xvals(1)-XvalsInterval : ActualInterval : Xvals(end)+XvalsInterval; Xvec = Xvec(:);
        Data_rows = size(ARGS.Data, 1); Data_columns = size(ARGS.Data, 2);
        Yvec = NaN(length(Xvec), Data_columns);
        for datactr = 1:Data_columns
            Yvec(:, datactr) = arrayfun(@(X) 100 * sum(feval(ARGS.CumulativeTimeShareComparisonOperator, ARGS.Data(:, datactr), X))/Data_rows, Xvec);
        end        
        line_handles = plot(ARGS.AxesHandle, Xvec, Yvec);
        arrayfun(@(X) set(bar_handles(X), 'FaceColor', get(line_handles(X), 'Color')), 1:length(bar_handles));
        set(ARGS.AxesHandle, 'NextPlot', currentNextPlot);
                
        legend(ARGS.AxesHandle, bar_handles, ARGS.DataItemNames{:}, 'Location', 'NorthWest');
        
        varargout = {Xvec(:), Yvec, Xvals(:), Ncount(:)};
        
end

end