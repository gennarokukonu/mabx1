function outdate = uisetdate(varargin)
%UISETDATE Interactive date selection. This function is based on MATLAB's
%built in 'calendar' function.
%
%   SYNTAX:
%   outdate = uisetdate : Opens an interactive date selection GUI. This
%   function suspends execution until date selection is complete or
%   cancelled. Returns a 1-by-3 partial date vector 'outdate' containing
%   the selected year, month, and day as its respective elements.
%
%   outdate = uisetdate(<Property>, <Value>, ...): Allows the user to
%   specify property/value pairs
%
%   PROPERTY/VALUE PAIRS
%   'MIN_YEAR', <1>: The minimum selectable year is specified. It should
%   not be less than 1.
%
%   'MAX_YEAR', <9999>: The maximum selectable year is specified. It should
%   not be greater than 9999, and should always be greater than or equal to
%   MIN_YEAR.
%
%   'StartingDate', <[]>: The starting date can be specified as a
%   date vector (or a partial date vector of three elements containing
%   year, month, and day). This date will be set when the interface is
%   launched. If the year corresponding to this StartingDate is outside the
%   range [MIN_YEAR, MAX_YEAR] then the year field of the date
%   vector is limited to MIN_YEAR or MAX_YEAR, as the case may be. It is
%   also possible to specify N date vectors to be selected as an N-by-3
%   (partial date vector) or N-by-6 (full date vector) matrix.
%
%   'MULTI_SELECT', <false>: If set to true, the user can select multiple
%   dates interactively. The return value is then an N-by-3 matrix of
%   partial date vectors where N is the number of dates selected.
%
%   'WindowStyle', <'modal'>: By default, the window style is set to modal.
%
%   See also: calendar, datevec, datenum, datestr

import('ptc_matlab_lib.*');

%MLOCK to lock the file in memory
mlock;

if length(varargin) >= 2 && isscalar(varargin{1}) && ishghandle(varargin{1})
    %This is a GUI Callback
    SRC_HANDLE = varargin{1}; %#ok<NASGU>
    EVENT_DATA = varargin{2}; %#ok<NASGU>
    assert(length(varargin) >= 2);
    varargin = varargin(3:end);
else
    SRC_HANDLE = []; %#ok<NASGU>
    EVENT_DATA = struct([]); %#ok<NASGU>
end

%Setting some persistent variables
persistent FIGURE_HANDLE;
persistent HANDLES;
persistent MIN_YEAR; %#ok<USENS>
persistent MAX_YEAR; %#ok<USENS>
persistent SELECTED_DATES;
persistent MULTI_SELECT; %#ok<USENS>

%Default action: init
pairs = {'action', 'init'};
parseargs(varargin, pairs);

%The following colors can be changed according to one's preference. These
%can also be normalized RGB triplets.
btnRCColor = 'yellow';
selected_btnRCColor = 'red';
btnOKColor = 'green';
btnCancelColor = 'green';
btnTodayColor = 'green';
btnClearColor = 'green';
btnPreviousYearColor = 'yellow';
btnPreviousMonthColor = 'yellow';
popupMonthColor = 'white';
popupYearColor = 'white';
btnNextMonthColor = 'yellow';
btnNextYearColor = 'yellow';
btnDayColor = 'green';

switch action
    
    %% CASE init
    case 'init'
        %Initialization code
        pairs = {'StartingDate', [], ...
            'WindowStyle', 'modal', ...
            'MIN_YEAR', 1, ...
            'MAX_YEAR', 9999, ...
            'MULTI_SELECT', false};
        parseargs(varargin, pairs);
        
        Units = 'pixels';
        
        if ~isempty(StartingDate) %#ok<NODEF>
            %Conditioning StartingDate as necessary
            StartingDate(StartingDate(:, 1) < MIN_YEAR, 1) = MIN_YEAR;
            StartingDate(StartingDate(:, 1) > MAX_YEAR, 1) = MAX_YEAR;
            YearList = StartingDate(:, 1);
            MonthList = StartingDate(:, 2);
            DayList = StartingDate(:, 3);
            maxdaylist = eomday(YearList, MonthList);
            StartingDate(DayList > maxdaylist, 3) = maxdaylist(DayList > maxdaylist);
            
            %Initializing persistent variable SELECTED_DATES
            SELECTED_DATES = StartingDate(:, 1:3);
            for ctr = size(SELECTED_DATES, 1):-1:2
                if ismember(SELECTED_DATES(ctr, :), SELECTED_DATES(1:ctr-1, :), 'rows')
                    SELECTED_DATES(ctr, :) = [];
                end
            end
            
            StartingDate = datenum(StartingDate(end, :));
        else
            SELECTED_DATES = zeros(0, 3);
            StartingDate = now;
        end
        
        %Creating complete list of months, years, and days of the week
        MonthList = arrayfun(@(x) datestr(datenum(num2str(x), 'mm'), 'mmmm'), ...
            (1:12).', ...
            'UniformOutput', false);
        YearList = cellstr(num2str((MIN_YEAR:MAX_YEAR).'));
        CurrentDateVec = datevec(now);
        thisMonthCalendar = calendar;
        thisMonthSundays = thisMonthCalendar(:, 1);
        thisMonthSundays(thisMonthSundays == 0) = [];
        FirstSunday = thisMonthSundays(1);
        DayList = arrayfun(@(X) datestr(datenum([CurrentDateVec(1:2) X]), 'dddd'), ...
            (FirstSunday:FirstSunday+6).', ...
            'UniformOutput', false);
        DayList_abbr = arrayfun(@(X) datestr(datenum([CurrentDateVec(1:2) X]), 'ddd'), ...
            (FirstSunday:FirstSunday+6).', ...
            'UniformOutput', false);
        
        %Positions
        pairs = {['figure_' mfilename '_position'],                               [524  234  287  336], ...
            'btnClear_position',                               [217   -1   72   31], ...
            'btnToday_position',                               [148   -1   70   31], ...
            'btnCancel_position',                                   [68  -1  81  31], ...
            'btnOK_position',                                    [0  -1  69  31], ...
            'btnR6C7_position', [246.8599      28.99933      42.14782      42.00088], ...
            'btnR6C6_position', [205.7159      28.99933      42.14782      42.00088], ...
            'btnR6C5_position', [164.572      28.99933      42.14782      42.00088], ...
            'btnR6C4_position', [123.428      28.99933      42.14782      42.00088], ...
            'btnR6C3_position',   [82.2841      28.9993      42.1478      42.0009], ...
            'btnR6C2_position',   [41.1401      28.9993      42.1478      42.0009], ...
            'btnR6C1_position', [-0.0035168      28.9993      42.1478      42.0009], ...
            'btnR5C7_position', [246.8599      70.00085      42.14782      42.00088], ...
            'btnR5C6_position', [205.7159      70.00085      42.14782      42.00088], ...
            'btnR5C5_position', [164.572      70.00085      42.14782      42.00088], ...
            'btnR5C4_position', [123.428      70.00085      42.14782      42.00088], ...
            'btnR5C3_position',   [82.2841      70.0008      42.1478      42.0009], ...
            'btnR5C2_position',   [41.1401      70.0008      42.1478      42.0009], ...
            'btnR5C1_position', [-0.0035168      70.0008      42.1478      42.0009], ...
            'btnR4C7_position', [246.8599      110.9989      42.14782      42.00088], ...
            'btnR4C6_position', [205.7159      110.9989      42.14782      42.00088], ...
            'btnR4C5_position', [164.572      110.9989      42.14782      42.00088], ...
            'btnR4C4_position', [123.428      110.9989      42.14782      42.00088], ...
            'btnR4C3_position', [82.28406      110.9989      42.14782      42.00088], ...
            'btnR4C2_position', [41.1401      110.9989      42.14782      42.00088], ...
            'btnR4C1_position', [-0.0035168      110.9989      42.14782      42.00088], ...
            'btnR3C7_position', [246.8599      152.0004      42.14782      42.00088], ...
            'btnR3C6_position', [205.7159      152.0004      42.14782      42.00088], ...
            'btnR3C5_position', [164.572      152.0004      42.14782      42.00088], ...
            'btnR3C4_position', [123.428      152.0004      42.14782      42.00088], ...
            'btnR3C3_position', [82.28406      152.0004      42.14782      42.00088], ...
            'btnR3C2_position', [41.1401      152.0004      42.14782      42.00088], ...
            'btnR3C1_position', [-0.0035168      152.0004      42.14782      42.00088], ...
            'btnR2C7_position', [246.8599      192.9985      42.14782      42.00088], ...
            'btnR2C6_position', [205.7159      192.9985      42.14782      42.00088], ...
            'btnR2C5_position', [164.572      192.9985      42.14782      42.00088], ...
            'btnR2C4_position', [123.428      192.9985      42.14782      42.00088], ...
            'btnR2C3_position', [82.28406      192.9985      42.14782      42.00088], ...
            'btnR2C2_position', [41.1401      192.9985      42.14782      42.00088], ...
            'btnR2C1_position', [-0.0035168      192.9985      42.14782      42.00088], ...
            'btnR1C7_position', [246.8599           234      42.14782      42.00088], ...
            'btnR1C6_position', [205.7159           234      42.14782      42.00088], ...
            'btnR1C5_position', [164.572           234      42.14782      42.00088], ...
            'btnR1C4_position', [123.428           234      42.14782      42.00088], ...
            'btnR1C3_position', [82.28406           234      42.14782      42.00088], ...
            'btnR1C2_position', [41.1401           234      42.14782      42.00088], ...
            'btnR1C1_position', [-0.0035168           234      42.14782      42.00088], ...
            'btnSaturday_position', [246.8599      275.0015      42.14782      42.00088], ...
            'btnFriday_position', [205.7159      275.0015      42.14782      42.00088], ...
            'btnThursday_position', [164.572      275.0015      42.14782      42.00088], ...
            'btnWednesday_position', [123.428      275.0015      42.14782      42.00088], ...
            'btnTuesday_position', [82.28406      275.0015      42.14782      42.00088], ...
            'btnMonday_position', [41.1401      275.0015      42.14782      42.00088], ...
            'btnSunday_position', [-0.0035168      275.0015      42.14782      42.00088], ...
            'btnNextYear_position', [259.9044      315.9996       29.1005      22.00015], ...
            'btnNextMonth_position', [231.8077      315.9996       29.1005      22.00015], ...
            'popupYear_position', [164.572      315.0002      69.24346      22.99985], ...
            'popupMonth_position', [56.19228      315.0002      109.3836      22.99985], ...
            'btnPreviousMonth_position', [28.09478      315.9996       29.1005      22.00015], ...
            'btnPreviousYear_position', [-0.0035168      315.9996       29.1005      22.00015]};
        parseargs(pairs);
        
        FIGURE_HANDLE = dialog('MenuBar', 'none', ...
            'Units', Units, ...
            'CreateFcn', {@movegui, 'center'}, ...
            'WindowStyle', 'normal', ...
            'Resize', 'off', ...
            'WindowStyle', WindowStyle, ...
            'Name', mfilename, ...
            'DeleteFcn', {str2func(thisfuncname), 'action', 'close'}, ...
            'CloseRequestFcn', {str2func(thisfuncname), 'action', 'btnCancelCallback'}, ...
            'Position', eval(['figure_' mfilename '_position']));
        
        BooleanStr = {'off', 'on'};
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnPreviousYear', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnPreviousYearColor, ...
            'FontSize', 13, ...
            'String', '<<', ...
            'Enable', BooleanStr{double(prevyearexists(StartingDate, MIN_YEAR))+1}, ...
            'TooltipString', 'Previous Year', ...
            'Position', btnPreviousYear_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnPreviousYearCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnPreviousMonth', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnPreviousMonthColor, ...
            'FontSize', 13, ...
            'String', '<', ...
            'Enable', BooleanStr{double(prevmonthexists(StartingDate, MIN_YEAR))+1}, ...
            'TooltipString', 'Previous Month', ...
            'Position', btnPreviousMonth_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnPreviousMonthCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'popupMonth', ...
            'Style', 'popup', ...
            'BackgroundColor', popupMonthColor, ...
            'String', MonthList, ...
            'TooltipString', 'Month', ...
            'Position', popupMonth_position, ...
            'Value', str2double(datestr(StartingDate, 'mm')), ...
            'Callback', {str2func(thisfuncname), 'action', 'popupMonthCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'popupYear', ...
            'Style', 'popup', ...
            'BackgroundColor', popupYearColor, ...
            'String', YearList, ...
            'TooltipString', 'Year', ...
            'Position', popupYear_position, ...
            'Value', find(strcmp(datestr(StartingDate, 'yyyy'), YearList), 1), ...
            'Callback', {str2func(thisfuncname), 'action', 'popupYearCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnNextMonth', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnNextMonthColor, ...
            'FontSize', 13, ...
            'String', '>', ...
            'Enable', BooleanStr{double(nextmonthexists(StartingDate, MAX_YEAR))+1}, ...
            'TooltipString', 'Next Month', ...
            'Position', btnNextMonth_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnNextMonthCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnNextYear', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnNextYearColor, ...
            'FontSize', 13, ...
            'String', '>>', ...
            'Enable', BooleanStr{double(nextyearexists(StartingDate, MAX_YEAR))+1}, ...
            'TooltipString', 'Next Year', ...
            'Position', btnNextYear_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnNextYearCallback'});
        
        BooleanStr = {'inactive', 'on'};
        for dayctr = 1:7
            uicontrol('Parent', FIGURE_HANDLE, ...
                'Units', Units, ...
                'Tag', ['btn' DayList{dayctr}], ...
                'Style', 'pushbutton', ...
                'BackgroundColor', btnDayColor, ...
                'FontSize', 10, ...
                'String', upper(DayList_abbr{dayctr}), ...
                'TooltipString', DayList{dayctr}, ...
                'Position', eval(['btn' DayList{dayctr} '_position']), ...
                'Enable', BooleanStr{double(MULTI_SELECT)+1}, ...
                'Callback', {str2func(thisfuncname), 'action', 'btnDayCallback', 'Day', dayctr});
        end
        
        calendar_matrix = calendar(StartingDate);
        for rowctr = 1:size(calendar_matrix, 1)
            for colctr = 1:size(calendar_matrix, 2)
                thistag = ['btnR' num2str(rowctr) 'C' num2str(colctr)];
                
                uicontrol('Parent', FIGURE_HANDLE, ...
                    'Units', Units, ...
                    'Tag', thistag, ...
                    'Style', 'pushbutton', ...
                    'BackgroundColor', btnRCColor, ...
                    'FontSize', 10, ...
                    'String', '', ...
                    'TooltipString', '', ...
                    'Position', eval([thistag '_position']), ...
                    'Callback', {str2func(thisfuncname), 'action', 'btnRCCallback', 'Row', rowctr , 'Column', colctr});
            end
        end
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnOK', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnOKColor, ...
            'FontSize', 13, ...
            'String', 'OK', ...
            'TooltipString', 'OK', ...
            'Position', btnOK_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnOKCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnCancel', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnCancelColor, ...
            'FontSize', 13, ...
            'String', 'CANCEL', ...
            'TooltipString', 'Cancel', ...
            'Position', btnCancel_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnCancelCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnToday', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnTodayColor, ...
            'FontSize', 13, ...
            'String', 'TODAY', ...
            'TooltipString', 'Select today''s date', ...
            'Position', btnToday_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnTodayCallback'});
        
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnToday', ...
            'Style', 'pushbutton', ...
            'BackgroundColor', btnClearColor, ...
            'FontSize', 13, ...
            'String', 'CLEAR', ...
            'TooltipString', 'Clear your selection(s)', ...
            'Position', btnClear_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnClearCallback'});
        
        HANDLES = guihandles(FIGURE_HANDLE);
        
        feval(thisfuncname, 'action', 'refresh_calendar');
        uiwait(FIGURE_HANDLE);
        outdate = SELECTED_DATES;
        feval(thisfuncname, 'action', 'close');
        
        %% CASE btnPreviousYearCallback
    case 'btnPreviousYearCallback'
        YearValue = get(HANDLES.popupYear, 'Value');
        set(HANDLES.popupYear, 'Value', YearValue-1);
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE btnPreviousMonthCallback
    case 'btnPreviousMonthCallback'
        YearValue = get(HANDLES.popupYear, 'Value');
        MonthValue = get(HANDLES.popupMonth, 'Value');
        newMonthValue = MonthValue - 1;
        if newMonthValue == 0
            newMonthValue = 12;
            newYearValue = YearValue - 1;
        else
            newYearValue = YearValue;
        end
        set(HANDLES.popupMonth, 'Value', newMonthValue);
        set(HANDLES.popupYear, 'Value', newYearValue);
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE refresh_calendar
    case 'refresh_calendar'
        BackgroundColor = {btnRCColor, selected_btnRCColor};
        
        MonthList = get(HANDLES.popupMonth, 'String');
        YearList = get(HANDLES.popupYear, 'String');
        thisMonth = str2double(datestr(datenum(MonthList{get(HANDLES.popupMonth, 'Value')}, 'mmmm'), 'mm'));
        thisYear = str2double(YearList{get(HANDLES.popupYear, 'Value')});
        calendar_matrix = calendar(thisYear, thisMonth);
        
        if ~isempty(SELECTED_DATES)
            last_selected_date = SELECTED_DATES(end, :);
            thisDay = last_selected_date(3);
        else
            thisDay = 1;
        end
        
        BooleanStr = {'off', 'on'};
        thisDateNum = datenum([thisYear thisMonth thisDay]);
        set(HANDLES.btnPreviousYear, 'Enable', BooleanStr{double(prevyearexists(thisDateNum, MIN_YEAR))+1});
        set(HANDLES.btnPreviousMonth, 'Enable', BooleanStr{double(prevmonthexists(thisDateNum, MIN_YEAR))+1});
        set(HANDLES.btnNextMonth, 'Enable', BooleanStr{double(nextmonthexists(thisDateNum, MAX_YEAR))+1});
        set(HANDLES.btnNextYear, 'Enable', BooleanStr{double(nextyearexists(thisDateNum, MAX_YEAR))+1});
        
        calendar_matrix_prev = calendar(thisDateNum-thisDay);
        if all(calendar_matrix_prev(end, :) == 0)
            calendar_matrix_prev(end, :) = [];
        end
        calendar_matrix_next = calendar(thisDateNum + eomday(thisYear, thisMonth) - thisDay + 1);
        
        rowctr_next = 1;
        for rowctr = 1:size(calendar_matrix, 1)
            for colctr = 1:size(calendar_matrix, 2)
                thistag = ['btnR' num2str(rowctr) 'C' num2str(colctr)];
                ShouldEnable = BooleanStr{double(calendar_matrix(rowctr, colctr) ~= 0) + 1};
                
                %If this date is in the list of selected dates, set the
                %background color appropriately
                thisDate = calendar_matrix(rowctr, colctr);
                try
                    if ismember([thisYear thisMonth thisDate], SELECTED_DATES, 'rows')
                        thisBackgroundColor = BackgroundColor{2};
                    else
                        thisBackgroundColor = BackgroundColor{1};
                    end
                catch
                    keyboard;
                end
                
                todayDateVec = datevec(now);
                if isequal(todayDateVec(1, 1:3), [thisYear thisMonth thisDate])
                    FontWeight = 'bold';
                else
                    FontWeight = 'normal';
                end
                
                %Modify calendar_matrix to include dates from the previous
                %month and the following month
                if calendar_matrix(rowctr, colctr) == 0
                    if rowctr == 1
                        calendar_matrix(rowctr, colctr) = calendar_matrix_prev(end, colctr);
                    else
                        calendar_matrix(rowctr, colctr) = calendar_matrix_next(rowctr_next, colctr);
                        if colctr == size(calendar_matrix, 2)
                            rowctr_next = rowctr_next + 1;
                        end
                    end
                end
                
                thisDateNum = datenum([thisYear thisMonth thisDate]);
                set(HANDLES.(thistag), 'String', num2str(calendar_matrix(rowctr, colctr)), ...
                    'TooltipString', sprintf('%s, %s %s, %s', ...
                    datestr(thisDateNum, 'DDDD'), ...
                    datestr(thisDateNum, 'dd'), ...
                    datestr(thisDateNum, 'mmmm'), ...
                    datestr(thisDateNum, 'yyyy')), ...
                    'Enable', ShouldEnable, ...
                    'BackgroundColor', thisBackgroundColor, ...
                    'FontWeight', FontWeight);
            end
        end
        
        %% CASE popupMonthCallback
    case 'popupMonthCallback'
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE popupYearCallback
    case 'popupYearCallback'
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE btnNextMonthCallback
    case 'btnNextMonthCallback'
        YearValue = get(HANDLES.popupYear, 'Value');
        MonthValue = get(HANDLES.popupMonth, 'Value');
        newMonthValue = MonthValue + 1;
        if newMonthValue == 13
            newMonthValue = 1;
            newYearValue = YearValue + 1;
        else
            newYearValue = YearValue;
        end
        set(HANDLES.popupMonth, 'Value', newMonthValue);
        set(HANDLES.popupYear, 'Value', newYearValue);
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE btnNextYearCallback
    case 'btnNextYearCallback'
        YearValue = get(HANDLES.popupYear, 'Value');
        set(HANDLES.popupYear, 'Value', YearValue+1);
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE btnDayCallback
    case 'btnDayCallback'
        if ~MULTI_SELECT
            return;
        end
        
        pairs = {'Day', []};
        parseargs(varargin, pairs);
        
        MonthList = get(HANDLES.popupMonth, 'String');
        YearList = get(HANDLES.popupYear, 'String');
        thisMonth = str2double(datestr(datenum(MonthList{get(HANDLES.popupMonth, 'Value')}, 'mmmm'), 'mm'));
        thisYear = str2double(YearList{get(HANDLES.popupYear, 'Value')});
        calendar_matrix = calendar(thisYear, thisMonth);
        theseDates = calendar_matrix(:, Day);
        theseDates(theseDates == 0) = [];
        
        added_dates = [repmat(thisYear, length(theseDates), 1) repmat(thisMonth, length(theseDates), 1) theseDates];
        [is_already_selected, loc] = ismember(added_dates, SELECTED_DATES, 'rows');
        SELECTED_DATES(loc(loc >= 1), :) = [];
        if ~all(is_already_selected)
            SELECTED_DATES = [SELECTED_DATES; added_dates];
        end
        
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE btnRCCallback
    case 'btnRCCallback'
        pairs = {'Row', [], ...
            'Column', []};
        parseargs(varargin, pairs);
        
        %Get the clicked date
        MonthList = get(HANDLES.popupMonth, 'String');
        YearList = get(HANDLES.popupYear, 'String');
        thisMonth = str2double(datestr(datenum(MonthList{get(HANDLES.popupMonth, 'Value')}, 'mmmm'), 'mm'));
        thisYear = str2double(YearList{get(HANDLES.popupYear, 'Value')});
        calendar_matrix = calendar(thisYear, thisMonth);
        thisDay = calendar_matrix(Row, Column);
        
        [is_already_selected, loc] = ismember([thisYear thisMonth thisDay], SELECTED_DATES, 'rows');
        if is_already_selected
            SELECTED_DATES(loc, :) = [];
        else
            if MULTI_SELECT
                SELECTED_DATES = [SELECTED_DATES; [thisYear thisMonth thisDay]];
            else
                SELECTED_DATES = [thisYear thisMonth thisDay];
            end
        end
        
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE btnOKCallback
    case 'btnOKCallback'
        if isempty(SELECTED_DATES)
            errordlg('No date(s) have been selected.');
            return;
        end
        uiresume(FIGURE_HANDLE);
        
        %% CASE btnCancelCallback
    case 'btnCancelCallback'
        SELECTED_DATES = zeros(0, size(SELECTED_DATES, 2));
        uiresume(FIGURE_HANDLE);
        
        %% CASE btnTodayCallback
    case 'btnTodayCallback'
        thisYear = str2double(datestr(now, 'yyyy'));
        
        if thisYear < MIN_YEAR || thisYear > MAX_YEAR
            return;
        end
        
        thisMonth = str2double(datestr(now, 'mm'));
        thisDay = str2double(datestr(now, 'dd'));
        
        [is_already_selected, loc] = ismember([thisYear thisMonth thisDay], SELECTED_DATES, 'rows');
        if is_already_selected
            SELECTED_DATES(loc, :) = [];
        end
        if MULTI_SELECT
            SELECTED_DATES = [SELECTED_DATES; [thisYear thisMonth thisDay]];
        else
            SELECTED_DATES = [thisYear thisMonth thisDay];
        end
        
        MonthList = get(HANDLES.popupMonth, 'String');
        YearList = get(HANDLES.popupYear, 'String');
        thisMonth = datestr(now, 'mmmm');
        thisYear = num2str(thisYear);
        
        set(HANDLES.popupMonth, 'Value', find(strcmp(thisMonth, MonthList), 1));
        set(HANDLES.popupYear, 'Value', find(strcmp(thisYear, YearList), 1));
        
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE btnClearCallback
    case 'btnClearCallback'
        SELECTED_DATES = zeros(0, size(SELECTED_DATES, 2));
        feval(thisfuncname, 'action', 'refresh_calendar');
        
        %% CASE close
    case 'close'
        if mislocked(mfilename)
            munlock(mfilename);
        end
        delete(FIGURE_HANDLE);
        clear(mfilename);
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% HELPER FUNCTIONS

function out = prevyearexists(dateval, MIN_YEAR)

thisyear = str2double(datestr(dateval, 'yyyy'));
out = (thisyear >= MIN_YEAR+1);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function out = prevmonthexists(dateval, MIN_YEAR)

thisyear = str2double(datestr(dateval, 'yyyy'));
thismonth = str2double(datestr(dateval, 'mm'));

out = (thismonth >=2 && thismonth <= 12) || (thismonth == 1 && thisyear >= MIN_YEAR+1);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function out = nextyearexists(dateval, MAX_YEAR)

thisyear = str2double(datestr(dateval, 'yyyy'));
out = (thisyear <= MAX_YEAR-1);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function out = nextmonthexists(dateval, MAX_YEAR)

thisyear = str2double(datestr(dateval, 'yyyy'));
thismonth = str2double(datestr(dateval, 'mm'));
out = (thismonth >= 1 && thismonth <= 11) || (thismonth == 12 && thisyear <= MAX_YEAR-1);

end
