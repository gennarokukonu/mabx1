function trcWriteTrcFile(varargin)
%trcWriteTrcFile: To write a single matlab structure obtained from
%trcParseTrcFile to a trc file
%
%   trcWriteTrcFile('TrcFilePath', <''>, 'trcFileStruct', <struct([])>)
%
%   See also: trcParseTrcFile

import('ptc_matlab_lib.*');

pairs = {'TrcFilePath', '', ...
    'trcFileStruct', struct([])};
parseargs(varargin, pairs);

if isempty(TrcFilePath)
    [filename, pathname] = uigetfile({'*.trc', 'TRC files (*.trc)'; '*.*', 'All files (*.*)'});
    if isequal(filename, 0) || isequal(pathname, 0)
        return;
    end
    TrcFilePath = fullfile(pathname, filename);
end

temp_file_path = tempname;
fid1 = fopen(TrcFilePath, 'r+');
fseek(fid1, 0, 'bof');
fid2 = fopen(temp_file_path, 'w+');
fseek(fid2, 0, 'bof');

try
    prevLine = strtrim(fgetl(fid1));
    thisLine = strtrim(fgetl(fid1));
    formatfunc = @(X) ptc_matlab_lib.formatstr(X, 'FormatBackslashes', true, 'FormatPercentageSymbols', true);
    
    %Step 1: Print modified header
    fprintf(fid2, ['-- ' repmat('*', 1, 78) '\n']);
    fprintf(fid2, ['-- TRC FILE ' formatfunc(TrcFilePath) '\n']);
    fprintf(fid2, ['-- ' isodatetime ' : GENERATED BY ' formatfunc(mfilename('fullpath')) '.m\n']);
    fprintf(fid2, ['-- ' repmat('*', 1, 78) '\n']);
    while ~strcmp(thisLine, '{')
        fprintf(fid2, [formatfunc(prevLine) '\n']);
        prevLine = thisLine;
        thisLine = strtrim(fgetl(fid1));
    end
    
    %THIS IS WHERE WE WRITE THE SAMPLING PERIOD ELEMENT ONLY
    fprintf(fid2, '\n');
    subStruct = struct('sampling_period0', trcFileStruct.sampling_period0);
    str_cell = trcFileStruct2Cell(subStruct, 'ShouldInit', true);
    fprintf(fid2, [strimplode(str_cell, '\n') '\n']);
    
    %REPEATING PREVIOUS OPERATION TO GET TYPEDEFS
    prevLine = thisLine;
    thisLine = strtrim(fgetl(fid1));
    while ~strcmp(thisLine, '}')
        prevLine = thisLine;
        thisLine = strtrim(fgetl(fid1));
    end
    %Skipping next line
    thisLine = strtrim(fgetl(fid1));
    
    prevLine = thisLine;
    thisLine = strtrim(fgetl(fid1));
    while ~strcmp(thisLine, '{')
        fprintf(fid2, [formatfunc(prevLine) '\n']);
        prevLine = thisLine;
        thisLine = strtrim(fgetl(fid1));
    end
    
    %THIS IS WHERE WE WRITE THE REMAINDER OF THE STRUCTURE TO THE TRC FILE
    fprintf(fid2, '\n');
    subStruct = rmfield(trcFileStruct, 'sampling_period0');
    str_cell = trcFileStruct2Cell(subStruct, 'ShouldInit', true);
    str_cell = strrep(formatfunc(str_cell), '\\t', '\t');
    fprintf(fid2, [strimplode(str_cell, '\n') '\n']);
    
    fclose(fid1); fclose(fid2);
    copyfile(TrcFilePath, [TrcFilePath '.bak'], 'f');
    copyfile(temp_file_path, TrcFilePath, 'f');
    delete(temp_file_path);
    
catch ME
    fclose(fid1);
    fclose(fid2);
    rethrow(ME);
end

end

%% FUNCTION trcFileStruct2Cell(trcFileStruct) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function outcell = trcFileStruct2Cell(trcFileStruct, varargin)

import('ptc_matlab_lib.*');

persistent addendum;

pairs = {'outcell', cell(0, 1), ...
    'ShouldInit', false};
parseargs(varargin, pairs);

if ShouldInit
    addendum = '';
end

fields = fieldnames(trcFileStruct);
fields = fields(cellfun(@(X) isstruct(trcFileStruct.(X)), fields));
for ctr = 1:length(fields)
    subfields = fieldnames(trcFileStruct.(fields{ctr}));
    if ~(trcFileStruct.(fields{ctr}).IS_GROUP)
        outcell{end+1, 1} = [addendum trcFileStruct.(fields{ctr}).ACTUAL_NAME];
        outcell{end+1, 1} = [addendum '{'];
        subfields = subfields(~ismember(subfields, {'IS_GROUP', 'ACTUAL_NAME'}));
        
        outcell_next = cellfun(@(X) ...
            [addendum ' ' X ':' trcFileStruct.(fields{ctr}).(X)], ...
            subfields, 'UniformOutput', false);
        
        outcell = [outcell(:);
            outcell_next(:)];
        
        outcell{end+1, 1} = [addendum '}'];
    else
        outcell{end+1, 1} = [addendum 'group "' trcFileStruct.(fields{ctr}).ACTUAL_NAME '"'];
        outcell{end+1, 1} = [addendum '{'];
        subfields = subfields(~cellfun(@(X) isstruct(trcFileStruct.(fields{ctr}).(X)) || ismember(X, {'IS_GROUP', 'ACTUAL_NAME'}), subfields));
        
        outcell_next = cellfun(@(X) ...
            [addendum ' ' X ':' trcFileStruct.(fields{ctr}).(X)], ...
            subfields, 'UniformOutput', false);
        
        outcell = [outcell(:);
            outcell_next(:)];
        
        outcell{end+1, 1} = [addendum '}'];
        addendum = [addendum '\t'];
        outcell = feval(thisfuncname, trcFileStruct.(fields{ctr}), 'outcell', outcell);
        addendum = regexprep(addendum, '\\t$', '');
        
        %Need to insert a blank line before endgroup, otherwise ControlDesk
        %complains.
        outcell{end+1, 1} = '';
        outcell{end+1, 1} = [addendum 'endgroup'];
    end
end

end
