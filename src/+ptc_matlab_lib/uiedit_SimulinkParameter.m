function varargout = uiedit_SimulinkParameter(varargin)
%UIEDIT_SIMULINKPARAMETER Edit Simulink.Parameter object in a GUI interface
%   Syntax:
%   uiedit_SimulinkParameter: Creates a new Simulink.Parameter object and
%   opens a GUI interface to edit it.
%
%   uiedit_SimulinkParameter('ParameterObject', <ParameterObject>): Opens a
%   GUI interface to edit ParameterObject, which needs to be a
%   Simulink.Parameter object. The passed argument can be a cell array of
%   Simulink.Parameter objects, in which case a window opens to edit each
%   Simulink.Parameter object one at a time.
%
%   Returns a cell array containing the edited Simulink.Parameter
%   object(s), suspends execution until closed.
%
%   NOTE: As of 2011-09-19, custom storage classes are not supported.
%   NOTE: As of 2011-09-19, enum and bus data types are not supported.
%
%   See also: uiedit_SimulinkSignal, uiedit_NumericVariable

import('ptc_matlab_lib.*');

%MLOCK to lock the function in memory
mlock;

pairs = {'ParameterObject', Simulink.Parameter, ...
    'WindowStyle', 'modal', ...
    'MaxIdentifierLength', 31, ...
    'VariableName', '', ...
    'ShouldEnableAlias', false, ...
    'ShouldValidateIdentifierLength', true};
parseargs(varargin, pairs);

if ischar(VariableName)
    VariableName = cellstr(VariableName);
end

if ~iscell(ParameterObject) %#ok<NODEF>
    ParameterObject = {ParameterObject};
end

updatedParameterObject = cell(size(ParameterObject));
cancelled = false(size(ParameterObject));
for ctr = 1:numel(ParameterObject)
    [updatedParameterObject{ctr}, cancelled(ctr)] = uiedit_SimulinkParameter_helper('action', 'init', ...
        'ParameterObject', ParameterObject{ctr}, ...
        'WindowStyle', WindowStyle, ...
        'MaxIdentifierLength', MaxIdentifierLength, ...
        'VariableName', VariableName{ctr}, ...
        'ShouldValidateIdentifierLength', ShouldValidateIdentifierLength, ...
        'ShouldEnableAlias', ShouldEnableAlias);
end

varargout{1} = updatedParameterObject;
varargout{2} = cancelled;

if mislocked(mfilename)
    munlock(mfilename);
end

end

%% FUNCTION uiedit_SimulinkParameter_helper %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function varargout = uiedit_SimulinkParameter_helper(varargin)

import('ptc_matlab_lib.*');

if length(varargin) >= 2 && isscalar(varargin{1}) && ishghandle(varargin{1})
    %This is a GUI Callback
    SRC_HANDLE = varargin{1}; %#ok<NASGU>
    EVENT_DATA = varargin{2}; %#ok<NASGU>
    assert(length(varargin) >= 2);
    varargin = varargin(3:end);
else
    SRC_HANDLE = []; %#ok<NASGU>
    EVENT_DATA = struct([]); %#ok<NASGU>
end

pairs = {'action', ''};
parseargs(varargin, pairs);

persistent DELETE_THESE_HANDLES;
persistent FIGURE_HANDLE;
persistent PARAMETER_OBJECT;
persistent MAX_IDENTIFIER_LENGTH;
persistent CANCELLED;
persistent VARIABLE_NAME;
persistent SHOULD_VALIDATE_IDENTIFIER_LENGTH;

switch action
    case 'init'
        pairs = {'ParameterObject', Simulink.Parameter, ...
            'WindowStyle', 'modal', ...
            'MaxIdentifierLength', 31, ...
            'ShouldValidateIdentifierLength', true, ...
            'VariableName', '', ...
            'ShouldEnableAlias', false};
        parseargs(varargin, pairs);
        
        PARAMETER_OBJECT = ParameterObject.copy; %#ok<NODEF>
        PARAMETER_OBJECT.Max = limit('InMatrix', PARAMETER_OBJECT.Max, 'UpperLimit', getmaxdtval(PARAMETER_OBJECT.DataType), 'LowerLimit', getmindtval(PARAMETER_OBJECT.DataType));
        PARAMETER_OBJECT.Min = limit('InMatrix', PARAMETER_OBJECT.Min, 'UpperLimit', getmaxdtval(PARAMETER_OBJECT.DataType), 'LowerLimit', getmindtval(PARAMETER_OBJECT.DataType));
        MAX_IDENTIFIER_LENGTH = MaxIdentifierLength;
        VARIABLE_NAME = VariableName;
        SHOULD_VALIDATE_IDENTIFIER_LENGTH = ShouldValidateIdentifierLength;
        
        CANCELLED = false;
        
        Units = 'characters';
        FontSize = 8.0;
        pairs = {['fig_' mfilename '_position'],  [103.6      22.92308          80.6      38.76923], ...
       'editDataTypeExpression_position',      [29.8      31.3077         45.6      1.76923], ...
       'textDataTypeExpression_position',       [3.8      31.3077         26.2      1.76923], ...
                'popupDataType_position',      [29.8      33.3846         45.6      1.76923], ...
                 'textDataType_position',       [3.8      33.3846         26.2      1.76923], ...
                    'editValue_position',      [29.8      35.3846           38      1.76923], ...
                 'btnEditValue_position',      [67.8      35.3846          6.8      1.76923], ...
                    'textValue_position',       [3.8      35.3846         26.2      1.76923], ...
               'editDimensions_position',      [29.8      29.3077         45.6      1.76923], ...
               'textDimensions_position',       [3.8      29.3077         26.2      1.76923], ...
               'editComplexity_position',      [29.8      27.3077         45.6      1.76923], ...
               'textComplexity_position',       [3.8      27.3077         26.2      1.76923], ...
                   'btnAutoMin_position',      [70.4      25.3077          4.4      1.76923], ...
                  'editMinimum_position',      [29.8      25.3077         40.2      1.76923], ...
                  'textMinimum_position',       [3.8      25.3077         26.2      1.76923], ...
                   'btnAutoMax_position',      [70.4      23.3077          4.4      1.76923], ...
                  'editMaximum_position',      [29.8      23.3077         40.2      1.76923], ...
                  'textMaximum_position',       [3.8      23.3077         26.2      1.76923], ...
            'editSelectedUnits_position',      [29.8      19.2308         45.6      1.76923], ...
            'textSelectedUnits_position',       [3.8      19.2308         26.2      1.76923], ...
                   'popupUnits_position',      [29.8      21.3077         45.6      1.76923], ...
                    'textUnits_position',       [3.8      21.3077         26.2      1.76923], ...
   'panelCodeGenerationOptions_position',       [3.8      12.4615         71.6      6.23077], ...
              'textDescription_position',       [3.8      10.2308         26.2      1.76923], ...
              'editDescription_position',       [3.8      4.53846           71      5.69231], ...
                     'btnApply_position',      [46.6      2.15385         13.8      1.69231], ...
                    'btnCancel_position',        [33      2.15385         13.8      1.69231], ...
                        'btnOK_position',      [19.4      2.15385         13.8      1.69231], ...
                    'editAlias_position',      [25.8     0.692308           43      1.76923], ...
                    'textAlias_position',         [2     0.692308           24      1.76923], ...
            'popupStorageClass_position',      [25.8      2.69231           43      1.76923], ...
             'textStorageClass_position',         [2      2.69231           24      1.76923]};
        parseargs(pairs);
        
        %If the figure is already open, bring it to the front
        if isfigure(FIGURE_HANDLE)
            figure(FIGURE_HANDLE);
            return;
        end
        
        FIGURE_HANDLE = dialog('MenuBar', 'none', ...
            'Name', mfilename, ...
            'Resize', 'off', ...
            'Units', Units, ...
            'WindowStyle', WindowStyle, ...
            'CreateFcn', {@movegui, 'center'}, ...
            'Position', eval(['fig_' mfilename '_position']), ...
            'DeleteFcn', {str2func(thisfuncname), 'action', 'close'}, ...
            'CloseRequestFcn', {str2func(thisfuncname), 'action', 'btnCancelCallback'});
        
        DELETE_THESE_HANDLES = FIGURE_HANDLE;
        
        %btnOK
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'btnOK', ...
            'Position', btnOK_position, ...
            'Style', 'pushbutton', ...
            'String', 'OK', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnOKCallback'});
        
        %btnCancel
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'btnCancel', ...
            'Position', btnCancel_position, ...
            'Style', 'pushbutton', ...
            'String', 'Cancel', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnCancelCallback'});
        
        %btnApply
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'btnApply', ...
            'Position', btnApply_position, ...
            'Style', 'pushbutton', ...
            'String', 'Apply', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnApplyCallback'});
        
        %editDescription
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editDescription', ...
            'Position', editDescription_position, ...
            'Style', 'edit', ...
            'Max', 99999, ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'String', PARAMETER_OBJECT.Description);
        
        %textDescription
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textDescription', ...
            'Position', textDescription_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Description:');
        
        %panelCodeGenerationOptions
        panelCodeGenerationOptions_hndl = uipanel('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'panelCodeGenerationOptions', ...
            'Position', panelCodeGenerationOptions_position, ...
            'Title', 'Code generation options:');
        
        %textStorageClass
        uicontrol('Parent', panelCodeGenerationOptions_hndl, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textStorageClass', ...
            'Position', textStorageClass_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Storage class:');
        
        %popupStorageClass
        StorageClassOptions = {'Auto', 'SimulinkGlobal', 'ExportedGlobal', ...
            'ImportedExtern', 'ImportedExternPointer'};
        uicontrol('Parent', panelCodeGenerationOptions_hndl, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'popupStorageClass', ...
            'Position', popupStorageClass_position, ...
            'Style', 'popupmenu', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'HorizontalAlignment', 'left', ...
            'String', StorageClassOptions, ...
            'Value', find(strcmp(PARAMETER_OBJECT.RTWInfo.StorageClass, StorageClassOptions), 1), ...
            'Callback', {str2func(thisfuncname), 'action', 'popupStorageClassCallback'});
        
        %textUnits
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textUnits', ...
            'Position', textUnits_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Units:');
        
        %popupUnits
        ActualUnitsList = unitslist;
        ActualUnitsList{strcmp('<empty>', ActualUnitsList)} = '';
        popupUnits_Value = find(strcmp(strtrim(PARAMETER_OBJECT.DocUnits), ActualUnitsList), 1);
        if isempty(popupUnits_Value)
            popupUnits_Value = find(strcmp('', ActualUnitsList), 1);
        end
        popupUnits_hndl = uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'popupUnits', ...
            'Position', popupUnits_position, ...
            'Style', 'popupmenu', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'HorizontalAlignment', 'left', ...
            'String', unitslist, ...
            'Value', popupUnits_Value, ...
            'Callback', {str2func(thisfuncname), 'action', 'popupUnitsCallback'});
        setappdata(popupUnits_hndl, 'popupUnits_ActualUnits', ActualUnitsList);
        
        %textSelectedUnits
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textSelectedUnits', ...
            'Position', textSelectedUnits_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Selected units:');
        
        %editSelectedUnits
        popupUnits_ActualUnits = getappdata(popupUnits_hndl, 'popupUnits_ActualUnits');
        editSelectedUnits_hndl = uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editSelectedUnits', ...
            'Position', editSelectedUnits_position, ...
            'Style', 'edit', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'HorizontalAlignment', 'left', ...
            'String', PARAMETER_OBJECT.DocUnits);
        if any(strcmp(strtrim(char(get(editSelectedUnits_hndl, 'String'))), popupUnits_ActualUnits))
            set(editSelectedUnits_hndl, 'Enable', 'off');
        end
        
        %textAlias
        uicontrol('Parent', panelCodeGenerationOptions_hndl, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textAlias', ...
            'Position', textAlias_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Alias:');
        
        %editAlias
        BooleanStr = {'off', 'on'};
        uicontrol('Parent', panelCodeGenerationOptions_hndl, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editAlias', ...
            'Position', editAlias_position, ...
            'Style', 'edit', ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'Enable', BooleanStr{double(ShouldEnableAlias)+1}, ...
            'String', PARAMETER_OBJECT.RTWInfo.Alias);
        
        %textMaximum
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textMaximum', ...
            'Position', textMaximum_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Maximum:');
        
        %editMaximum
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editMaximum', ...
            'Position', editMaximum_position, ...
            'Style', 'edit', ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'String', num2str(PARAMETER_OBJECT.Max, '%1.12g'));
        
        %btnAutoMax
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnAutoMax', ...
            'Position', btnAutoMax_position, ...
            'Style', 'pushbutton', ...
            'String', '', ...
            'TooltipString', 'Maximum value based on the selected data type', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnAutoMaxCallback'});
        
        %textMinimum
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textMinimum', ...
            'Position', textMinimum_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Minimum:');
        
        %editMinimum
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editMinimum', ...
            'Position', editMinimum_position, ...
            'Style', 'edit', ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'String', num2str(PARAMETER_OBJECT.Min, '%1.12g'));
        
        %btnAutoMin
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnAutoMin', ...
            'Position', btnAutoMin_position, ...
            'Style', 'pushbutton', ...
            'String', '', ...
            'TooltipString', 'Minimum value based on the selected data type', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnAutoMinCallback'});
        
        %textComplexity
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textComplexity', ...
            'Position', textComplexity_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Complexity:');
        
        %editComplexity
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editComplexity', ...
            'Position', editComplexity_position, ...
            'Style', 'edit', ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'Enable', 'off', ...
            'String', PARAMETER_OBJECT.Complexity);
        
        %textDimensions
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textDimensions', ...
            'Position', textDimensions_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Dimensions:');
        
        %editDimensions
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editDimensions', ...
            'Position', editDimensions_position, ...
            'Style', 'edit', ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'Enable', 'off', ...
            'String', ['[' regexprep(num2str(PARAMETER_OBJECT.Dimensions), '\s+', ' ') ']']);
        
        %textValue
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textValue', ...
            'Position', textValue_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Value:');
        
        %btnEditValue
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'Tag', 'btnEditValue', ...
            'Style', 'pushbutton', ...
            'String', 'EDIT', ...
            'TooltipString', 'Edit value', ...
            'Position', btnEditValue_position, ...
            'Callback', {str2func(thisfuncname), 'action', 'btnEditValueCallback'});
        
        %editValue
        editValue_hndl = uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editValue', ...
            'Position', editValue_position, ...
            'Style', 'edit', ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont, ...
            'Enable', 'on', ...
            'Callback', {str2func(thisfuncname), 'action', 'editValueCallback'});
        if isscalar(PARAMETER_OBJECT.Value)
            set(editValue_hndl, 'String', num2str(PARAMETER_OBJECT.Value, '%1.12g'));
        else
            dim = strtrim(num2str(size(PARAMETER_OBJECT.Value)));
            dim = regexprep(dim, '\s+', 'x');
            editValue_hndl_String = ['<' dim ' ' class(PARAMETER_OBJECT.Value) '>'];
            set(editValue_hndl, 'String', editValue_hndl_String);
        end
        setappdata(editValue_hndl, 'editValue_ActualValue', PARAMETER_OBJECT.Value);
        
        %textDataType
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textDataType', ...
            'Position', textDataType_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Data type:');
        
        %popupDataType
        popupDataType_Options = {'auto', 'single', 'int8', 'uint8', 'int16', ...
            'uint16', 'int32', 'uint32'};
        popupDataType_DataTypeExpressions = {'fixdt(''double'')', 'fixdt(''single'')', ...
            'fixdt(''int8'')', 'fixdt(''uint8'')', ...
            'fixdt(''int16'')', 'fixdt(''uint16'')', 'fixdt(''int32'')', ...
            'fixdt(''uint32'')'};
        popupDataType_Options = [popupDataType_Options {'boolean', '<data type expression>'}];
        popupDataType_DataTypeExpressions = [popupDataType_DataTypeExpressions {'fixdt(''boolean'')', '<data type expression>'}];
        thisDataType = PARAMETER_OBJECT.DataType;
        thisValue = find(strcmp(thisDataType, popupDataType_Options), 1);
        if isempty(thisValue)
            thisValue = find(strcmp(thisDataType, popupDataType_DataTypeExpressions), 1);
        end
        if isempty(thisValue)
            thisValue = find(strcmp('<data type expression>', popupDataType_Options), 1);
        end
        popupDataType_hndl = uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'popupDataType', ...
            'Position', popupDataType_position, ...
            'Style', 'popup', ...
            'FontName', editfont, ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'String', popupDataType_Options, ...
            'Value', thisValue, ...
            'Callback', {str2func(thisfuncname), 'action', 'popupDataTypeCallback'});
        setappdata(popupDataType_hndl, 'popupDataType_DataTypeExpressions', popupDataType_DataTypeExpressions);
        
        %textDataTypeExpression
        uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'textDataTypeExpression', ...
            'Position', textDataTypeExpression_position, ...
            'Style', 'text', ...
            'HorizontalAlignment', 'left', ...
            'String', 'Data type expression:');
        
        %editDataTypeExpression
        editDataTypeExpression_hndl = uicontrol('Parent', FIGURE_HANDLE, ...
            'Units', Units, ...
            'FontSize', FontSize, ...
            'Tag', 'editDataTypeExpression', ...
            'Position', editDataTypeExpression_position, ...
            'Style', 'edit', ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor', 'white', ...
            'FontName', editfont);
        if ~strcmp(popupDataType_Options{get(popupDataType_hndl, 'Value')}, '<data type expression>')
            set(editDataTypeExpression_hndl, 'Enable', 'off');
            editDataTypeExpression_String = popupDataType_DataTypeExpressions{get(popupDataType_hndl, 'Value')};
        else
            editDataTypeExpression_String = PARAMETER_OBJECT.DataType;
        end
        set(editDataTypeExpression_hndl, 'String', editDataTypeExpression_String);
        
        waitfor(FIGURE_HANDLE);
        varargout{1} = PARAMETER_OBJECT;
        varargout{2} = CANCELLED;
        clear(mfilename);
        
        %% CASE btnOKCallback
    case 'btnOKCallback'
        success = feval(thisfuncname, 'action', 'btnApplyCallback');
        if ~success
            return;
        end
        feval(thisfuncname, 'action', 'close');
        
        %% CASE btnCancelCallback
    case 'btnCancelCallback'
        PARAMETER_OBJECT = [];
        CANCELLED = true;
        feval(thisfuncname, 'action', 'close');
        
        %% CASE popupStorageClassCallback
    case 'popupStorageClassCallback'
        handles = guihandles(FIGURE_HANDLE);
        
        initStorageClass = PARAMETER_OBJECT.RTWInfo.StorageClass;
        popupStorageClass_String = cellstr(get(handles.popupStorageClass, 'String'));
        popupStorageClass_Value = get(handles.popupStorageClass, 'Value');
        newStorageClass = popupStorageClass_String{popupStorageClass_Value};
        
        if strcmp(newStorageClass, 'Auto') && ~strcmp(newStorageClass, initStorageClass)
            set(handles.editAlias, 'String', '');
        else
            set(handles.editAlias, 'String', VARIABLE_NAME);
        end
            
        
        %% CASE btnApplyCallback
    case 'btnApplyCallback'
        %Return true if successful, false if not.
        handles = guihandles(FIGURE_HANDLE);
        
        try
            editValue_ActualValue = getappdata(handles.editValue, 'editValue_ActualValue');
            if ~isscalar(editValue_ActualValue)
                set(handles.editValue, 'String', ['<' regexprep(num2str(size(editValue_ActualValue)), '\s+', 'x') ' ' class(editValue_ActualValue) '>']);
            else
                set(handles.editValue, 'String', num2str(editValue_ActualValue, '%1.12g'));
            end
            MinVal = evalsafe(strtrim(char(get(handles.editMinimum, 'String'))));
            MaxVal = evalsafe(strtrim(char(get(handles.editMaximum, 'String'))));
            DataType = strtrim(char(get(handles.editDataTypeExpression, 'String')));
            DataType = getfixdtexpression('DataTypeString', DataType);
            set(handles.editDataTypeExpression, 'String', DataType);
            MinVal = limit('InMatrix', MinVal, 'LowerLimit', getmindtval(DataType), 'UpperLimit', getmaxdtval(DataType));
            MaxVal = limit('InMatrix', MaxVal, 'LowerLimit', getmindtval(DataType), 'UpperLimit', getmaxdtval(DataType));
            thisAlias = strtrim(char(get(handles.editAlias, 'String')));
            
            if MinVal > MaxVal
                waitfor(errordlg('Specified minimum value is greater than specified maximum value'));
                uicontrol(handles.editMinimum);
                varargout{1} = false;
                return;
            end
            
            if isnumeric(editValue_ActualValue(:)) && ...
                    (any(editValue_ActualValue(:) < MinVal) || any(editValue_ActualValue(:) > MaxVal))
                waitfor(errordlg(['One or more elements of the specified value are outside the valid range [' num2str(MinVal) ', ' num2str(MaxVal) ']'], '', 'modal'));
                uicontrol(handles.editValue);
                varargout{1} = false;
                return;
            end
            
            if length(thisAlias) > MAX_IDENTIFIER_LENGTH && SHOULD_VALIDATE_IDENTIFIER_LENGTH
                waitfor(errordlg(['The specified alias is longer than ' num2str(MAX_IDENTIFIER_LENGTH) ' characters.'], '', 'modal'));
                uicontrol(handles.editAlias);
                varargout{1} = false;
                return;
            end
            
            ParameterObject = Simulink.Parameter;
            ParameterObject.Value = editValue_ActualValue;
            if strcmp(ParameterObject.Complexity, 'complex')
                waitfor(warndlg('Inconsistent data: Minimum and maximum are not supported for complex data.'));
            end
            ParameterObject.Value = limit('InMatrix', ParameterObject.Value, ...
                'UpperLimit', MaxVal, ...
                'LowerLimit', MinVal);
            ParameterObject.DataType = DataType;
            ParameterObject.Min = MinVal;
            ParameterObject.Max = MaxVal;
            ParameterObject.DocUnits = strtrim(char(get(handles.editSelectedUnits, 'String')));
            
            popupStorageClass_String = cellstr(get(handles.popupStorageClass, 'String'));
            popupStorageClass_Value = get(handles.popupStorageClass, 'Value');
            ParameterObject.RTWInfo.StorageClass = popupStorageClass_String{popupStorageClass_Value};
            
            ParameterObject.RTWInfo.Alias = strtrim(char(get(handles.editAlias, 'String')));
            ParameterObject.Description = sprintf(strimplode(strtrim(cellstr(get(handles.editDescription, 'String'))), '\n'));
            
            set(handles.editDimensions, 'String', ['[' regexprep(num2str(ParameterObject.Dimensions), '\s+', ' ') ']']);
            set(handles.editComplexity, 'String', ParameterObject.Complexity);
            set(handles.editMaximum, 'String', num2str(ParameterObject.Max, '%1.12g'));
            set(handles.editMinimum, 'String', num2str(ParameterObject.Min, '%1.12g'));
            
            PARAMETER_OBJECT = ParameterObject.copy;
            varargout{1} = true;
            drawnow;
        catch ME
            if strcmp(ME.identifier, [mfilename ':' thisfuncname ':AliasTooLong'])
                waitfor(errordlg(['ERROR: The ''Alias'' field should not be more than ' num2str(MAX_IDENTIFIER_LENGTH) ...
                    ' characters long.'], '', 'modal'));
            else
                waitfor(errordlg('ERROR: One or more parameters specified are invalid', '', 'modal'));
            end
            varargout{1} = false;
        end
        
        %% CASE btnAutoMaxCallback
    case 'btnAutoMaxCallback'
        try
            handles = guihandles(FIGURE_HANDLE);
            thisdt = strtrim(char(get(handles.editDataTypeExpression, 'String')));
            set(handles.editMaximum, 'String', num2str(getmaxdtval(thisdt), '%1.12g'));
        end
        
        %% CASE btnAutoMinCallback
    case 'btnAutoMinCallback'
        try
            handles = guihandles(FIGURE_HANDLE);
            thisdt = strtrim(char(get(handles.editDataTypeExpression, 'String')));
            set(handles.editMinimum, 'String', num2str(getmindtval(thisdt), '%1.12g'));
        end
        
        %% CASE popupUnitsCallback
    case 'popupUnitsCallback'
        handles = guihandles(FIGURE_HANDLE);
        popupUnits_ActualUnits = getappdata(handles.popupUnits, 'popupUnits_ActualUnits');
        popupUnits_Value = get(handles.popupUnits, 'Value');
        theseUnits = popupUnits_ActualUnits{popupUnits_Value};
        set(handles.editSelectedUnits, 'Enable', 'off', 'String', theseUnits);
        
        %% CASE editValueCallback
    case 'editValueCallback'
        handles = guihandles(FIGURE_HANDLE);
        editValue_String = strtrim(char(get(handles.editValue, 'String')));
        try
            if isempty(editValue_String)
                editValue_ActualValue = [];
            else
                editValue_ActualValue = evalsafe(editValue_String);
            end
            setappdata(handles.editValue, 'editValue_ActualValue', editValue_ActualValue);
        end
        
        %% CASE btnEditValueCallback
    case 'btnEditValueCallback'
        handles = guihandles(FIGURE_HANDLE);
        handles_to_disable = findall(FIGURE_HANDLE);
        disabled_handles = disable_handles('HandleList', handles_to_disable);
        
        UpperLimit = PARAMETER_OBJECT.Max;
        LowerLimit = PARAMETER_OBJECT.Min;
       
        [val, cancelled] = uiedit_NumericVariable('NumericVariable', getappdata(handles.editValue, 'editValue_ActualValue'), ...
            'AllowNaNs', false, ...
            'UpperLimit', UpperLimit, ...
            'LowerLimit', LowerLimit, ...
            'AllowLowerLimitAdjustment', true, ...
            'AllowUpperLimitAdjustment', true, ...
            'AllowImaginary', true, ...
            'AllowResize', true, ...
            'VariableName', VARIABLE_NAME, ...
            'VariableUnits', PARAMETER_OBJECT.DocUnits);        
        
        if ~cancelled
            Value = val{1}.Value;
            UpperLimit = val{1}.Max;
            LowerLimit = val{1}.Min;
            set(handles.editMaximum, 'String', num2str(UpperLimit, '%1.12g'));
            set(handles.editMinimum, 'String', num2str(LowerLimit, '%1.12g'));
            setappdata(handles.editValue, 'editValue_ActualValue', Value);
            if isscalar(Value)
                set(handles.editValue, 'String', num2str(Value, '%1.12g'));
            else
                dim = strtrim(num2str(size(Value)));
                dim = regexprep(dim, '\s+', 'x');
                editValue_hndl_String = ['<' dim ' ' class(Value) '>'];
                set(handles.editValue, 'String', editValue_hndl_String);
            end
        end
        
        enable_handles('HandleList', disabled_handles);
        
        %% CASE popupDataTypeCallback
    case 'popupDataTypeCallback'
        handles = guihandles(FIGURE_HANDLE);
        popupDataType_DataTypeExpressions = getappdata(handles.popupDataType, ...
            'popupDataType_DataTypeExpressions');
        popupDataType_Value = get(handles.popupDataType, 'Value');
        this_popupDataType_DataTypeExpression = popupDataType_DataTypeExpressions{popupDataType_Value};
        
        if ~strcmp(this_popupDataType_DataTypeExpression, '<data type expression>')
            set(handles.editDataTypeExpression, 'String', this_popupDataType_DataTypeExpression);
            set(handles.editDataTypeExpression, 'Enable', 'off');
        else
            set(handles.editDataTypeExpression, 'String', getfixdtexpression('DataTypeString', PARAMETER_OBJECT.DataType));
            set(handles.editDataTypeExpression, 'Enable', 'on');
        end
        
        %% CASE close
    case 'close'
        for ctr = 1:numel(DELETE_THESE_HANDLES)
            try
                delete(DELETE_THESE_HANDLES(ctr));
            end
        end
end

end