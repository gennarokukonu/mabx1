function varargout = uiselectfromlist(varargin)

persistent GLOBALS;
import('ptc_matlab_lib.*');

% if ~mislocked(mfilename)
%     mlock;
% end

if length(varargin) >= 2 && isscalar(varargin{1}) && ishghandle(varargin{1})
    %This is a GUI Callback
    GLOBALS.SRC_HANDLE = varargin{1};
    GLOBALS.EVENT_DATA = varargin{2};
    assert(length(varargin) >= 2);
    varargin = varargin(3:end);
else
    GLOBALS.SRC_HANDLE = [];
    GLOBALS.EVENT_DATA = struct([]);
end

pairs = {'action', 'init'};
parseargs(varargin, pairs);

switch action
    case 'init'
        pairs = {'ListString', cell(0, 1), ...
            'SelectionMode', 'single', ...
            'FigureParams', cell(0, 1)};
        ARGS = parseargs(varargin, pairs);
        ARGS.ListString = cellstr(ARGS.ListString); ARGS.ListString = ARGS.ListString(:);
        if isempty(ARGS.ListString)
            ARGS.ListString = {''};
        end
        
        pairs = {['fig_' mfilename '_position'],      [0.40417         0.4     0.16607      0.5019], ...
            'btnCancel',      [0.53405    0.049336     0.24731    0.075901], ...
            'btnOK',      [0.17563    0.049336     0.24731    0.075901], ...
            'listboxStringList',     [0.082437     0.14231     0.81004     0.66034], ...
            'btnReset',      [0.72043     0.80835     0.17921    0.047438], ...
            'btnFilter',      [0.54122     0.80835     0.17921    0.047438], ...
            'editRegularExpressionFilter',     [0.082437     0.80645      0.4552    0.049336], ...
            'textSelectFromList',     [0.078853     0.90133      0.8172    0.049336]};
        posvars = parseargs(pairs);
        
        GLOBALS.FIGURE_HANDLE = dialog('MenuBar', 'none', ...
            'Name', mfilename, ...
            'Resize', 'on', ...
            'Units', 'normalized', ...
            'WindowStyle', 'modal', ...
            'CreateFcn', {@movegui, 'center'}, ...
            'Position', eval(['posvars.fig_' mfilename '_position']), ...
            'DeleteFcn', {str2func(thisfuncname), 'action', 'btnCancelCallback'}, ...
            'CloseRequestFcn', {str2func(thisfuncname), 'action', 'btnCancelCallback'});
        if ~isempty(ARGS.FigureParams)
            set(GLOBALS.FIGURE_HANDLE, ARGS.FigureParams{:});
        end
        GLOBALS.DELETE_THESE_HANDLES = GLOBALS.FIGURE_HANDLE;
        
        %btnCancel
        uicontrol('Parent', GLOBALS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'btnCancel', ...
            'Position', posvars.btnCancel, ...
            'Style', 'pushbutton', ...
            'String', 'CANCEL', ...
            'TooltipString', 'CANCEL', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnCancelCallback'});
        
        %btnOK
        uicontrol('Parent', GLOBALS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'btnOK', ...
            'Position', posvars.btnOK, ...
            'Style', 'pushbutton', ...
            'String', 'OK', ...
            'TooltipString', 'OK', ...
            'FontWeight', 'bold', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnOKCallback'});
        
        %listboxStringListContextMenu
        listboxStringListContextMenu = uicontextmenu('Parent', GLOBALS.FIGURE_HANDLE);
        uimenu(listboxStringListContextMenu, ...
            'Label', 'Copy selected item(s) to clipboard', ...
            'Callback', {str2func(thisfuncname), 'action', 'listboxStringListContextMenu_CopySelectedCallback'});
        
        %listboxStringList
        listboxStringList_String = ARGS.ListString;
        if isempty(ARGS.ListString)
            listboxStringList_String = {''};
        end
        listboxStringList = uicontrol('Parent', GLOBALS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'listboxStringList', ...
            'Position', posvars.listboxStringList, ...
            'Style', 'listbox', ...
            'String', listboxStringList_String, ...
            'Value', 1, ...
            'TooltipString', 'Item List', ...
            'Max', ternaryoperator(strcmp(ARGS.SelectionMode, 'single'), 1, 2), ...
            'Min', 0, ...
            'FontName', editfont, ...
            'BackgroundColor', 'white', ...
            'UIContextMenu', listboxStringListContextMenu, ...
            'KeyPressFcn', {str2func(thisfuncname), 'action', 'listboxStringListKeyPressFcn'});
        setappdata(listboxStringList, 'CompleteList', listboxStringList_String);
        
        %btnReset
        uicontrol('Parent', GLOBALS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'btnReset', ...
            'Position', posvars.btnReset, ...
            'Style', 'pushbutton', ...
            'String', 'Reset', ...
            'TooltipString', 'Reset filter', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnResetCallback'});
        
        %btnFilter
        uicontrol('Parent', GLOBALS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'btnFilter', ...
            'Position', posvars.btnFilter, ...
            'Style', 'pushbutton', ...
            'String', 'Filter', ...
            'TooltipString', 'Regular expression filter', ...
            'FontWeight', 'bold', ...
            'Callback', {str2func(thisfuncname), 'action', 'btnFilterCallback'});
        
        %editRegularExpressionFilter
        uicontrol('Parent', GLOBALS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'editRegularExpressionFilter', ...
            'Position', posvars.editRegularExpressionFilter, ...
            'Style', 'edit', ...
            'TooltipString', 'Regular expression filter', ...
            'FontName', editfont, ...
            'HorizontalAlignment', 'center', ...
            'BackgroundColor', 'white', ...
            'KeyPressFcn', {str2func(thisfuncname), 'action', 'editRegularExpressionFilterKeyPressFcn'});
        
        %textSelectFromList
        uicontrol('Parent', GLOBALS.FIGURE_HANDLE, ...
            'Units', 'normalized', ...
            'Tag', 'textSelectFromList', ...
            'Position', posvars.textSelectFromList, ...
            'Style', 'text', ...
            'String', 'SELECT FROM LIST', ...
            'TooltipString', 'SELECT FROM LIST', ...
            'FontWeight', 'bold', ...
            'FontSize', 12, ...
            'BackgroundColor', 'yellow');
        
        GLOBALS.CANCELLED = false;
        
        uiwait(GLOBALS.FIGURE_HANDLE);
        if GLOBALS.CANCELLED
            varargout{1} = 0;
        else
            varargout{1} = getselectedstring(listboxStringList);
            varargout{1} = varargout{1}{1};
        end
        feval(thisfuncname, 'action', 'close');
        
        %% CASE listboxStringListContextMenu_CopySelectedCallback
    case 'listboxStringListContextMenu_CopySelectedCallback'
        handles_to_enable = disable_handles('HandleList', GLOBALS.FIGURE_HANDLE);
        handles = guihandles(GLOBALS.FIGURE_HANDLE);
        selected_string = getselectedstring(handles.listboxStringList);
        clipboard('copy', strimplode(selected_string{1}, sprintf('\r\n')));
        enable_handles('HandleList', handles_to_enable);
        
        %% CASE editRegularExpressionFilterKeyPressFcn
    case 'editRegularExpressionFilterKeyPressFcn'
        if (isfield(GLOBALS.EVENT_DATA, 'Key') || isprop(GLOBALS.EVENT_DATA, 'Key')) && strcmp(GLOBALS.EVENT_DATA.Key, 'return')
            feval(thisfuncname, 'action', 'btnFilterCallback');
        end
        
        %% CASE btnOKCallback
    case 'btnOKCallback'
        handles_to_enable = disable_handles('HandleList', GLOBALS.FIGURE_HANDLE);
        handles = guihandles(GLOBALS.FIGURE_HANDLE);
        StringList = getselectedstring(handles.listboxStringList);
        if isempty(StringList{1}) || isempty(StringList{1}{1})
            waitfor(errordlg('Please select at least one item', 'ERROR', 'modal'));
            enable_handles('HandleList', handles_to_enable);
            return;
        end
        enable_handles('HandleList', handles_to_enable);
        uiresume;
        
        %% CASE btnCancelCallback
    case 'btnCancelCallback'
        GLOBALS.CANCELLED = true;
        uiresume;
        
        %% CASE listboxStringListKeyPressFcn
    case 'listboxStringListKeyPressFcn'
        if (isfield(GLOBALS.EVENT_DATA, 'Key') || isprop(GLOBALS.EVENT_DATA, 'Key')) && strcmp(GLOBALS.EVENT_DATA.Key, 'return')
            feval(thisfuncname, 'action', 'btnOKCallback');
        end
        
        %% CASE btnFilterCallback
    case 'btnFilterCallback'
        handles_to_enable = disable_handles('HandleList', GLOBALS.FIGURE_HANDLE);
        
        handles = guihandles(GLOBALS.FIGURE_HANDLE);
        pattern = strtrim(char(get(handles.editRegularExpressionFilter, 'String')));
        CompleteList = getappdata(handles.listboxStringList, 'CompleteList');
        if isempty(pattern)
            if isempty(CompleteList)
                set(handles.listboxStringList, 'String', {''}, 'Value', 1);
            else
                set(handles.listboxStringList, 'String', CompleteList, 'Value', 1);
            end
            enable_handles('HandleList', handles_to_enable);
            return;
        end
        
        result = regexpi(CompleteList, pattern);
        result = CompleteList(~cellfun(@isempty, result));
        if isempty(result)
            set(handles.listboxStringList, 'String', {''}, 'Value', 1);
        else
            set(handles.listboxStringList, 'String', result, 'Value', 1);
        end
        
        enable_handles('HandleList', handles_to_enable);
        
        %% CASE btnResetCallback
    case 'btnResetCallback'
        handles_to_enable = disable_handles('HandleList', GLOBALS.FIGURE_HANDLE);
        
        handles = guihandles(GLOBALS.FIGURE_HANDLE);
        
        set(handles.editRegularExpressionFilter, 'String', '');
        feval(thisfuncname, 'action', 'btnFilterCallback');
        
        enable_handles('HandleList', handles_to_enable);
        
        %% CASE close
    case 'close'
        if mislocked(mfilename)
            munlock(mfilename);
        end
        if isfield(GLOBALS, 'DELETE_THESE_HANDLES')
            for ctr = 1:numel(GLOBALS.DELETE_THESE_HANDLES)
                try %#ok<TRYNC>
                    delete(GLOBALS.DELETE_THESE_HANDLES(ctr));
                end
            end
        end
        
    otherwise
        error([mfilename ':' thisfuncname ':UnknownAction'], ['Unknown action ' action]);
        
end