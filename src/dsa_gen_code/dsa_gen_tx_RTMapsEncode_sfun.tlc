%% file : dsa_gen_tx_RTMapsEncode_sfun.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for dsa_gen_tx_RTMapsEncode_sfun
%% 
%% Simulink version      : 9.1 (R2018a) 06-Feb-2018
%% TLC file generated on : 29-Jan-2020 15:28:33

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'dsa_gen_tx_RTMapsEncode_sfun';
     def.OutputFcnSpec = 'void Update_Tx_RTMapsEncode(RTMapsTX u1[1], uint8 y1[24], uint32 y2[1])';
     def.StartFcnSpec = 'void Init_Tx_RTMapsEncode()';
     def.HeaderFiles = {'dsa_gen_tx_RTMapsEncode.h'};
     def.SourceFiles = {'dsa_gen_tx_RTMapsEncode.c'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements dsa_gen_tx_RTMapsEncode_sfun "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("dsa_gen_tx_RTMapsEncode_sfun_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int dsa_gen_tx_RTMapsEncode_sfun_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth);
        extern int dsa_gen_tx_RTMapsEncode_sfun_wrapper_freemem(void** u1BUS);

        extern void dsa_gen_tx_RTMapsEncode_sfun_wrapper_Start(void);
        extern void dsa_gen_tx_RTMapsEncode_sfun_wrapper_Output(const void* u1, void* u1BUS,  uint8_T* y1,  uint32_T* y2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("dsa_gen_tx_RTMapsEncode_sfun_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "dsa_gen_tx_RTMapsEncode.h"

        #include "dsa_gen_RTMapsTX.h"

        int dsa_gen_tx_RTMapsEncode_sfun_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth) {
            *u1BUS = calloc(sizeof(RTMapsTX), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            return 0;
        }
        
        int dsa_gen_tx_RTMapsEncode_sfun_wrapper_freemem(void** u1BUS) {
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            return 0;
        }

        void dsa_gen_tx_RTMapsEncode_sfun_wrapper_Start(void) {
            Init_Tx_RTMapsEncode();
        }

        void dsa_gen_tx_RTMapsEncode_sfun_wrapper_Output(const void* u1, void* u1BUS,  uint8_T* y1,  uint32_T* y2) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(RTMapsTX *)u1BUS)", "(char *)u1", 0)>

            Update_Tx_RTMapsEncode((RTMapsTX *) u1BUS, y1, y2);
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("dsa_gen_tx_RTMapsEncode.h")>
        %<LibAddToCommonIncludes("dsa_gen_RTMapsTX.h")>
    %endif
    %<SLibAddToStaticSources("dsa_gen_tx_RTMapsEncode.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (dsa_gen_tx_RTMapsEncode_sfun_wrapper_allocmem(%<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        dsa_gen_tx_RTMapsEncode_sfun_wrapper_Start();
    %else
        %% 
        Init_Tx_RTMapsEncode();
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        dsa_gen_tx_RTMapsEncode_sfun_wrapper_Output(%<u1_ptr>, %<u1BUS_ptr>, %<y1_ptr>, %<y2_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %% 
        Update_Tx_RTMapsEncode((RTMapsTX*)%<u1_ptr>, %<y1_ptr>, %<y2_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (dsa_gen_tx_RTMapsEncode_sfun_wrapper_freemem(%<u1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
